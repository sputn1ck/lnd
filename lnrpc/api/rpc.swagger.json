{
  "swagger": "2.0",
  "info": {
    "title": "rpc.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/balance/blockchain": {
      "get": {
        "summary": "* lncli: `walletbalance`\r\nWalletBalance returns total unspent outputs(confirmed and unconfirmed), all\r\nconfirmed unspent outputs and all unconfirmed unspent outputs under control\r\nof the wallet.",
        "operationId": "WalletBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcWalletBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/balance/channels": {
      "get": {
        "summary": "* lncli: `channelbalance`\r\nChannelBalance returns the total funds available across all open channels\r\nin satoshis.",
        "operationId": "ChannelBalance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelBalanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/changepassword": {
      "post": {
        "summary": "* lncli: `changepassword`\r\nChangePassword changes the password of the encrypted wallet. This will\r\nautomatically unlock the wallet database if successful.",
        "operationId": "ChangePassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChangePasswordResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcChangePasswordRequest"
            }
          }
        ],
        "tags": [
          "WalletUnlocker"
        ]
      }
    },
    "/v1/channels": {
      "get": {
        "summary": "* lncli: `listchannels`\r\nListChannels returns a description of all the open channels that this node\r\nis a participant in.",
        "operationId": "ListChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListChannelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "inactive_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "public_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "private_only",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "*\r\nOpenChannelSync is a synchronous version of the OpenChannel RPC call. This\r\ncall is meant to be consumed by clients to the REST proxy. As with all\r\nother sync calls, all byte slices are intended to be populated as hex\r\nencoded strings.",
        "operationId": "OpenChannelSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelPoint"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcOpenChannelRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/abandon/{channel_point.funding_txid_str}/{channel_point.output_index}": {
      "delete": {
        "summary": "* lncli: `abandonchannel`\r\nAbandonChannel removes all channel state from the database except for a\r\nclose summary. This method can be used to get rid of permanently unusable\r\nchannels due to bugs fixed in newer versions of lnd. Only available\r\nwhen in debug builds of lnd.",
        "operationId": "AbandonChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcAbandonChannelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "channel_point.funding_txid_str",
            "description": "*\r\nHex-encoded string representing the byte-reversed hash of the funding\r\ntransaction.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "channel_point.output_index",
            "description": "/ The index of the output of the funding transaction",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "channel_point.funding_txid_bytes",
            "description": "*\r\nTxid of the funding transaction. When using REST, this field must be\r\nencoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup": {
      "get": {
        "summary": "*\r\nExportAllChannelBackups returns static channel backups for all existing\r\nchannels known to lnd. A set of regular singular static channel backups for\r\neach channel are returned. Additionally, a multi-channel backup is returned\r\nas well, which contains a single encrypted blob containing the backups of\r\neach channel.",
        "operationId": "ExportAllChannelBackups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChanBackupSnapshot"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/restore": {
      "post": {
        "summary": "* lncli: `restorechanbackup`\r\nRestoreChannelBackups accepts a set of singular channel backups, or a\r\nsingle encrypted multi-chan backup and attempts to recover any funds\r\nremaining within the channel. If we are able to unpack the backup, then the\r\nnew channel will be shown under listchannels, as well as pending channels.",
        "operationId": "RestoreChannelBackups",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcRestoreBackupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcRestoreChanBackupRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/verify": {
      "post": {
        "summary": "*\r\nVerifyChanBackup allows a caller to verify the integrity of a channel backup\r\nsnapshot. This method will accept either a packed Single or a packed Multi.\r\nSpecifying both will result in an error.",
        "operationId": "VerifyChanBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcVerifyChanBackupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcChanBackupSnapshot"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/backup/{chan_point.funding_txid_str}/{chan_point.output_index}": {
      "get": {
        "summary": "* lncli: `exportchanbackup`\r\nExportChannelBackup attempts to return an encrypted static channel backup\r\nfor the target channel identified by it channel point. The backup is\r\nencrypted with a key generated from the aezeed seed of the user. The\r\nreturned backup can either be restored using the RestoreChannelBackup\r\nmethod once lnd is running, or via the InitWallet and UnlockWallet methods\r\nfrom the WalletUnlocker service.",
        "operationId": "ExportChannelBackup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelBackup"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "chan_point.funding_txid_str",
            "description": "*\r\nHex-encoded string representing the byte-reversed hash of the funding\r\ntransaction.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "chan_point.output_index",
            "description": "/ The index of the output of the funding transaction",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "chan_point.funding_txid_bytes",
            "description": "*\r\nTxid of the funding transaction. When using REST, this field must be\r\nencoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/closed": {
      "get": {
        "summary": "* lncli: `closedchannels`\r\nClosedChannels returns a description of all the closed channels that\r\nthis node was a participant in.",
        "operationId": "ClosedChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcClosedChannelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "cooperative",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "local_force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "remote_force",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "breach",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "funding_canceled",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "abandoned",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/pending": {
      "get": {
        "summary": "* lncli: `pendingchannels`\r\nPendingChannels returns a list of all the channels that are currently\r\nconsidered \"pending\". A channel is pending if it has finished the funding\r\nworkflow and is waiting for confirmations for the funding txn, or is in the\r\nprocess of closure, either initiated cooperatively or non-cooperatively.",
        "operationId": "PendingChannels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcPendingChannelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/transactions": {
      "post": {
        "summary": "*\r\nSendPaymentSync is the synchronous non-streaming version of SendPayment.\r\nThis RPC is intended to be consumed by clients of the REST proxy.\r\nAdditionally, this RPC expects the destination's public key and the payment\r\nhash (if any) to be encoded as hex strings.",
        "operationId": "SendPaymentSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/transactions/route": {
      "post": {
        "summary": "*\r\nSendToRouteSync is a synchronous version of SendToRoute. It Will block\r\nuntil the payment either fails or succeeds.",
        "operationId": "SendToRouteSync",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendToRouteRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/channels/{channel_point.funding_txid_str}/{channel_point.output_index}": {
      "delete": {
        "summary": "* lncli: `closechannel`\r\nCloseChannel attempts to close an active channel identified by its channel\r\noutpoint (ChannelPoint). The actions of this method can additionally be\r\naugmented to attempt a force close after a timeout period in the case of an\r\ninactive peer. If a non-force close (cooperative closure) is requested,\r\nthen the user can specify either a target number of blocks until the\r\nclosure transaction is confirmed, or a manual fee rate. If neither are\r\nspecified, then a default lax, block confirmation target is used.",
        "operationId": "CloseChannel",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcCloseStatusUpdate"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of lnrpcCloseStatusUpdate"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "channel_point.funding_txid_str",
            "description": "*\r\nHex-encoded string representing the byte-reversed hash of the funding\r\ntransaction.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "channel_point.output_index",
            "description": "/ The index of the output of the funding transaction",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "channel_point.funding_txid_bytes",
            "description": "*\r\nTxid of the funding transaction. When using REST, this field must be\r\nencoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "force",
            "description": "/ If true, then the channel will be closed forcibly. This means the current commitment transaction will be signed and broadcast.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "target_conf",
            "description": "/ The target number of blocks that the closure transaction should be confirmed by.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "sat_per_byte",
            "description": "/ A manual fee rate set in sat/byte that should be used when crafting the closure transaction.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "delivery_address",
            "description": "An optional address to send funds to in the case of a cooperative close.\r\nIf the channel was opened with an upfront shutdown script and this field\r\nis set, the request to close will fail because the channel must pay out\r\nto the upfront shutdown addresss.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/chanpolicy": {
      "post": {
        "summary": "* lncli: `updatechanpolicy`\r\nUpdateChannelPolicy allows the caller to update the fee schedule and\r\nchannel policies for all channels globally, or a particular channel.",
        "operationId": "UpdateChannelPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcPolicyUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcPolicyUpdateRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/fees": {
      "get": {
        "summary": "* lncli: `feereport`\r\nFeeReport allows the caller to obtain a report detailing the current fee\r\nschedule enforced by the node globally for each channel.",
        "operationId": "FeeReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcFeeReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/genseed": {
      "get": {
        "summary": "*\r\nGenSeed is the first method that should be used to instantiate a new lnd\r\ninstance. This method allows a caller to generate a new aezeed cipher seed\r\ngiven an optional passphrase. If provided, the passphrase will be necessary\r\nto decrypt the cipherseed to expose the internal wallet seed.",
        "description": "Once the cipherseed is obtained and verified by the user, the InitWallet\r\nmethod should be used to commit the newly generated seed, and create the\r\nwallet.",
        "operationId": "GenSeed",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcGenSeedResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "aezeed_passphrase",
            "description": "*\r\naezeed_passphrase is an optional user provided passphrase that will be used\r\nto encrypt the generated aezeed cipher seed. When using REST, this field\r\nmust be encoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "seed_entropy",
            "description": "*\r\nseed_entropy is an optional 16-bytes generated via CSPRNG. If not\r\nspecified, then a fresh set of randomness will be used to create the seed.\r\nWhen using REST, this field must be encoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "WalletUnlocker"
        ]
      }
    },
    "/v1/getinfo": {
      "get": {
        "summary": "* lncli: `getinfo`\r\nGetInfo returns general information concerning the lightning node including\r\nit's identity pubkey, alias, the chains it is connected to, and information\r\nconcerning the number of open+pending channels.",
        "operationId": "GetInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcGetInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph": {
      "get": {
        "summary": "* lncli: `describegraph`\r\nDescribeGraph returns a description of the latest graph state from the\r\npoint of view of the node. The graph information is partitioned into two\r\ncomponents: all the nodes/vertexes, and all the edges that connect the\r\nvertexes themselves. As this is a directed graph, the edges also contain\r\nthe node directional specific routing policy which includes: the time lock\r\ndelta, fee information, etc.",
        "operationId": "DescribeGraph",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelGraph"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "include_unannounced",
            "description": "*\r\nWhether unannounced channels are included in the response or not. If set,\r\nunannounced channels are included. Unannounced channels are both private\r\nchannels, and public channels that are not yet announced to the network.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/edge/{chan_id}": {
      "get": {
        "summary": "* lncli: `getchaninfo`\r\nGetChanInfo returns the latest authenticated network announcement for the\r\ngiven channel identified by its channel ID: an 8-byte integer which\r\nuniquely identifies the location of transaction's funding output within the\r\nblockchain.",
        "operationId": "GetChanInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcChannelEdge"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "chan_id",
            "description": "*\r\nThe unique channel ID for the channel. The first 3 bytes are the block\r\nheight, the next 3 the index within the block, and the last 2 bytes are the\r\noutput index for the channel.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/info": {
      "get": {
        "summary": "* lncli: `getnetworkinfo`\r\nGetNetworkInfo returns some basic stats about the known channel graph from\r\nthe point of view of the node.",
        "operationId": "GetNetworkInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNetworkInfo"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/node/{pub_key}": {
      "get": {
        "summary": "* lncli: `getnodeinfo`\r\nGetNodeInfo returns the latest advertised, aggregated, and authenticated\r\nchannel information for the specified node identified by its public key.",
        "operationId": "GetNodeInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNodeInfo"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "pub_key",
            "description": "/ The 33-byte hex-encoded compressed public of the target node",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "include_channels",
            "description": "/ If true, will include all known channels associated with the node.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/graph/routes/{pub_key}/{amt}": {
      "get": {
        "summary": "* lncli: `queryroutes`\r\nQueryRoutes attempts to query the daemon's Channel Router for a possible\r\nroute to a target destination capable of carrying a specific amount of\r\nsatoshis. The returned route contains the full details required to craft and\r\nsend an HTLC, also including the necessary information that should be\r\npresent within the Sphinx packet encapsulated within the HTLC.",
        "operationId": "QueryRoutes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcQueryRoutesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "pub_key",
            "description": "/ The 33-byte hex-encoded public key for the payment destination",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "amt",
            "description": "*\r\nThe amount to send expressed in satoshis.\r\n\nThe fields amt and amt_msat are mutually exclusive.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "amt_msat",
            "description": "*\r\nThe amount to send expressed in millisatoshis.\r\n\nThe fields amt and amt_msat are mutually exclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "final_cltv_delta",
            "description": "*\r\nAn optional CLTV delta from the current height that should be used for the\r\ntimelock of the final hop. Note that unlike SendPayment, QueryRoutes does\r\nnot add any additional block padding on top of final_ctlv_delta. This\r\npadding of a few blocks needs to be added manually or otherwise failures may\r\nhappen when a block comes in while the payment is in flight.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "fee_limit.fixed",
            "description": "*\r\nThe fee limit expressed as a fixed amount of satoshis.\r\n\nThe fields fixed and fixed_msat are mutually exclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fee_limit.fixed_msat",
            "description": "*\r\nThe fee limit expressed as a fixed amount of millisatoshis.\r\n\nThe fields fixed and fixed_msat are mutually exclusive.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "fee_limit.percent",
            "description": "/ The fee limit expressed as a percentage of the payment amount.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "ignored_nodes",
            "description": "*\r\nA list of nodes to ignore during path finding. When using REST, these fields\r\nmust be encoded as base64.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "format": "byte"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "source_pub_key",
            "description": "*\r\nThe source node where the request route should originated from. If empty,\r\nself is assumed.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "use_mission_control",
            "description": "*\r\nIf set to true, edge probabilities from mission control will be used to get\r\nthe optimal route.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "cltv_limit",
            "description": "* \r\nAn optional maximum total time lock for the route. If the source is empty or\r\nourselves, this should not exceed lnd's `--max-cltv-expiry` setting. If\r\nzero, then the value of `--max-cltv-expiry` is used as the limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "outgoing_chan_id",
            "description": "*\r\nThe channel id of the channel that must be taken to the first hop. If zero,\r\nany channel may be used.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "last_hop_pubkey",
            "description": "*\r\nThe pubkey of the last hop of the route. If empty, any hop may be used.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "dest_features",
            "description": "*\r\nFeatures assumed to be supported by the final node. All transitive feature\r\ndependencies must also be set properly. For a given feature bit pair, either\r\noptional or remote may be set, but not both. If this field is nil or empty,\r\nthe router will try to load destination features from the graph as a\r\nfallback.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "DATALOSS_PROTECT_REQ",
                "DATALOSS_PROTECT_OPT",
                "INITIAL_ROUING_SYNC",
                "UPFRONT_SHUTDOWN_SCRIPT_REQ",
                "UPFRONT_SHUTDOWN_SCRIPT_OPT",
                "GOSSIP_QUERIES_REQ",
                "GOSSIP_QUERIES_OPT",
                "TLV_ONION_REQ",
                "TLV_ONION_OPT",
                "EXT_GOSSIP_QUERIES_REQ",
                "EXT_GOSSIP_QUERIES_OPT",
                "STATIC_REMOTE_KEY_REQ",
                "STATIC_REMOTE_KEY_OPT",
                "PAYMENT_ADDR_REQ",
                "PAYMENT_ADDR_OPT",
                "MPP_REQ",
                "MPP_OPT"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/initwallet": {
      "post": {
        "summary": "* \r\nInitWallet is used when lnd is starting up for the first time to fully\r\ninitialize the daemon and its internal wallet. At the very least a wallet\r\npassword must be provided. This will be used to encrypt sensitive material\r\non disk.",
        "description": "In the case of a recovery scenario, the user can also specify their aezeed\r\nmnemonic and passphrase. If set, then the daemon will use this prior state\r\nto initialize its internal wallet.\r\n\nAlternatively, this can be used along with the GenSeed RPC to obtain a\r\nseed, then present it to the user. Once it has been verified by the user,\r\nthe seed can be fed into this RPC in order to commit the new wallet.",
        "operationId": "InitWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcInitWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcInitWalletRequest"
            }
          }
        ],
        "tags": [
          "WalletUnlocker"
        ]
      }
    },
    "/v1/invoice/{r_hash_str}": {
      "get": {
        "summary": "* lncli: `lookupinvoice`\r\nLookupInvoice attempts to look up an invoice according to its payment hash.\r\nThe passed payment hash *must* be exactly 32 bytes, if not, an error is\r\nreturned.",
        "operationId": "LookupInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "r_hash_str",
            "description": "*\r\nThe hex-encoded payment hash of the invoice to be looked up. The passed\r\npayment hash must be exactly 32 bytes, otherwise an error is returned.\r\nDeprecated now that the REST gateway supports base64 encoding of bytes\r\nfields.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "r_hash",
            "description": "*\r\nThe payment hash of the invoice to be looked up. When using REST, this field\r\nmust be encoded as base64.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/invoices": {
      "get": {
        "summary": "* lncli: `listinvoices`\r\nListInvoices returns a list of all the invoices currently stored within the\r\ndatabase. Any active debug invoices are ignored. It has full support for\r\npaginated responses, allowing users to query for specific invoices through\r\ntheir add_index. This can be done by using either the first_index_offset or\r\nlast_index_offset fields included in the response as the index_offset of the\r\nnext request. By default, the first 100 invoices created will be returned.\r\nBackwards pagination is also supported through the Reversed flag.",
        "operationId": "ListInvoices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "pending_only",
            "description": "*\r\nIf set, only invoices that are not settled and not canceled will be returned\r\nin the response.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "index_offset",
            "description": "*\r\nThe index of an invoice that will be used as either the start or end of a\r\nquery to determine which invoices should be returned in the response.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "num_max_invoices",
            "description": "/ The max number of invoices to return in the response to this query.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "reversed",
            "description": "*\r\nIf set, the invoices returned will result from seeking backwards from the\r\nspecified index offset. This can be used to paginate backwards.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "* lncli: `addinvoice`\r\nAddInvoice attempts to add a new invoice to the invoice database. Any\r\nduplicated invoices are rejected, therefore all invoices *must* have a\r\nunique payment preimage.",
        "operationId": "AddInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcAddInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcInvoice"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/invoices/subscribe": {
      "get": {
        "summary": "*\r\nSubscribeInvoices returns a uni-directional stream (server -\u003e client) for\r\nnotifying the client of newly added/settled invoices. The caller can\r\noptionally specify the add_index and/or the settle_index. If the add_index\r\nis specified, then we'll first start by sending add invoice events for all\r\ninvoices with an add_index greater than the specified value. If the\r\nsettle_index is specified, the next, we'll send out all settle events for\r\ninvoices with a settle_index greater than the specified value. One or both\r\nof these fields can be set. If no fields are set, then we'll only send out\r\nthe latest add/settle events.",
        "operationId": "SubscribeInvoices",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/lnrpcInvoice"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of lnrpcInvoice"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "add_index",
            "description": "*\r\nIf specified (non-zero), then we'll first start by sending out\r\nnotifications for all added indexes with an add_index greater than this\r\nvalue. This allows callers to catch up on any events they missed while they\r\nweren't connected to the streaming RPC.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "settle_index",
            "description": "*\r\nIf specified (non-zero), then we'll first start by sending out\r\nnotifications for all settled indexes with an settle_index greater than\r\nthis value. This allows callers to catch up on any events they missed while\r\nthey weren't connected to the streaming RPC.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/macaroon": {
      "post": {
        "summary": "* lncli: `bakemacaroon`\r\nBakeMacaroon allows the creation of a new macaroon with custom read and\r\nwrite permissions. No first-party caveats are added since this can be done\r\noffline.",
        "operationId": "BakeMacaroon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcBakeMacaroonResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcBakeMacaroonRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/newaddress": {
      "get": {
        "summary": "* lncli: `newaddress`\r\nNewAddress creates a new address under control of the local wallet.",
        "operationId": "NewAddress",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcNewAddressResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "type",
            "description": "/ The address type.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "WITNESS_PUBKEY_HASH",
              "NESTED_PUBKEY_HASH",
              "UNUSED_WITNESS_PUBKEY_HASH",
              "UNUSED_NESTED_PUBKEY_HASH"
            ],
            "default": "WITNESS_PUBKEY_HASH"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/payments": {
      "get": {
        "summary": "* lncli: `listpayments`\r\nListPayments returns a list of all outgoing payments.",
        "operationId": "ListPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListPaymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "include_incomplete",
            "description": "*\r\nIf true, then return payments that have not yet fully completed. This means\r\nthat pending payments, as well as failed payments will show up if this\r\nfield is set to True.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "Lightning"
        ]
      },
      "delete": {
        "summary": "*\r\nDeleteAllPayments deletes all outgoing payments from DB.",
        "operationId": "DeleteAllPayments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDeleteAllPaymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/payreq/{pay_req}": {
      "get": {
        "summary": "* lncli: `decodepayreq`\r\nDecodePayReq takes an encoded payment request string and attempts to decode\r\nit, returning a full description of the conditions encoded within the\r\npayment request.",
        "operationId": "DecodePayReq",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcPayReq"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "pay_req",
            "description": "/ The payment request string to be decoded",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/peers": {
      "get": {
        "summary": "* lncli: `listpeers`\r\nListPeers returns a verbose listing of all currently active peers.",
        "operationId": "ListPeers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListPeersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "* lncli: `connect`\r\nConnectPeer attempts to establish a connection to a remote peer. This is at\r\nthe networking level, and is used for communication between nodes. This is\r\ndistinct from establishing a channel with a peer.",
        "operationId": "ConnectPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcConnectPeerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcConnectPeerRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/peers/{pub_key}": {
      "delete": {
        "summary": "* lncli: `disconnect`\r\nDisconnectPeer attempts to disconnect one peer from another identified by a\r\ngiven pubKey. In the case that we currently have a pending or active channel\r\nwith the target peer, then this action will be not be allowed.",
        "operationId": "DisconnectPeer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcDisconnectPeerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "pub_key",
            "description": "/ The pubkey of the node to disconnect from",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/signmessage": {
      "post": {
        "summary": "* lncli: `signmessage`\r\nSignMessage signs a message with this node's private key. The returned\r\nsignature string is `zbase32` encoded and pubkey recoverable, meaning that\r\nonly the message digest and signature are needed for verification.",
        "operationId": "SignMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSignMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSignMessageRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/switch": {
      "post": {
        "summary": "* lncli: `fwdinghistory`\r\nForwardingHistory allows the caller to query the htlcswitch for a record of\r\nall HTLCs forwarded within the target time range, and integer offset\r\nwithin that time range. If no time-range is specified, then the first chunk\r\nof the past 24 hrs of forwarding history are returned.",
        "description": "A list of forwarding events are returned. The size of each forwarding event\r\nis 40 bytes, and the max message size able to be returned in gRPC is 4 MiB.\r\nAs a result each message can only contain 50k entries. Each response has\r\nthe index offset of the last entry. The index offset can be provided to the\r\nrequest to allow the caller to skip a series of records.",
        "operationId": "ForwardingHistory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcForwardingHistoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcForwardingHistoryRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/transactions": {
      "get": {
        "summary": "* lncli: `listchaintxns`\r\nGetTransactions returns a list describing all the known transactions\r\nrelevant to the wallet.",
        "operationId": "GetTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcTransactionDetails"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "tags": [
          "Lightning"
        ]
      },
      "post": {
        "summary": "* lncli: `sendcoins`\r\nSendCoins executes a request to send coins to a particular address. Unlike\r\nSendMany, this RPC call only allows creating a single output at a time. If\r\nneither target_conf, or sat_per_byte are set, then the internal wallet will\r\nconsult its fee model to determine a fee for the default confirmation\r\ntarget.",
        "operationId": "SendCoins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcSendCoinsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcSendCoinsRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/transactions/fee": {
      "get": {
        "summary": "* lncli: `estimatefee`\r\nEstimateFee asks the chain backend to estimate the fee rate and total fees\r\nfor a transaction that pays to multiple specified outputs.",
        "operationId": "EstimateFee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcEstimateFeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "target_conf",
            "description": "/ The target number of blocks that this transaction should be confirmed by.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/unlockwallet": {
      "post": {
        "summary": "* lncli: `unlock`\r\nUnlockWallet is used at startup of lnd to provide a password to unlock\r\nthe wallet database.",
        "operationId": "UnlockWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcUnlockWalletResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcUnlockWalletRequest"
            }
          }
        ],
        "tags": [
          "WalletUnlocker"
        ]
      }
    },
    "/v1/utxos": {
      "get": {
        "summary": "* lncli: `listunspent`\r\nListUnspent returns a list of all utxos spendable by the wallet with a\r\nnumber of confirmations between the specified minimum and maximum.",
        "operationId": "ListUnspent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcListUnspentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "min_confs",
            "description": "/ The minimum number of confirmations to be included.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "max_confs",
            "description": "/ The maximum number of confirmations to be included.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    },
    "/v1/verifymessage": {
      "post": {
        "summary": "* lncli: `verifymessage`\r\nVerifyMessage verifies a signature over a msg. The signature must be\r\nzbase32 encoded and signed by an active node in the resident node's\r\nchannel database. In addition to returning the validity of the signature,\r\nVerifyMessage also returns the recovered pubkey from the signature.",
        "operationId": "VerifyMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/lnrpcVerifyMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/lnrpcVerifyMessageRequest"
            }
          }
        ],
        "tags": [
          "Lightning"
        ]
      }
    }
  },
  "definitions": {
    "ChannelCloseSummaryClosureType": {
      "type": "string",
      "enum": [
        "COOPERATIVE_CLOSE",
        "LOCAL_FORCE_CLOSE",
        "REMOTE_FORCE_CLOSE",
        "BREACH_CLOSE",
        "FUNDING_CANCELED",
        "ABANDONED"
      ],
      "default": "COOPERATIVE_CLOSE"
    },
    "ChannelCloseSummaryInitiator": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "LOCAL",
        "REMOTE",
        "BOTH"
      ],
      "default": "UNKNOWN"
    },
    "ChannelEventUpdateUpdateType": {
      "type": "string",
      "enum": [
        "OPEN_CHANNEL",
        "CLOSED_CHANNEL",
        "ACTIVE_CHANNEL",
        "INACTIVE_CHANNEL",
        "PENDING_OPEN_CHANNEL"
      ],
      "default": "OPEN_CHANNEL"
    },
    "HTLCAttemptHTLCStatus": {
      "type": "string",
      "enum": [
        "IN_FLIGHT",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "IN_FLIGHT"
    },
    "InvoiceInvoiceState": {
      "type": "string",
      "enum": [
        "OPEN",
        "SETTLED",
        "CANCELED",
        "ACCEPTED"
      ],
      "default": "OPEN"
    },
    "PaymentPaymentStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN_FLIGHT",
        "SUCCEEDED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "PeerEventEventType": {
      "type": "string",
      "enum": [
        "PEER_ONLINE",
        "PEER_OFFLINE"
      ],
      "default": "PEER_ONLINE"
    },
    "PeerSyncType": {
      "type": "string",
      "enum": [
        "UNKNOWN_SYNC",
        "ACTIVE_SYNC",
        "PASSIVE_SYNC"
      ],
      "default": "UNKNOWN_SYNC",
      "description": " - UNKNOWN_SYNC: *\r\nDenotes that we cannot determine the peer's current sync type.\n - ACTIVE_SYNC: *\r\nDenotes that we are actively receiving new graph updates from the peer.\n - PASSIVE_SYNC: *\r\nDenotes that we are not receiving new graph updates from the peer."
    },
    "PendingChannelsResponseClosedChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "/ The pending channel to be closed"
        },
        "closing_txid": {
          "type": "string",
          "title": "/ The transaction id of the closing transaction"
        }
      }
    },
    "PendingChannelsResponseForceClosedChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "/ The pending channel to be force closed"
        },
        "closing_txid": {
          "type": "string",
          "title": "/ The transaction id of the closing transaction"
        },
        "limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The balance in satoshis encumbered in this pending channel"
        },
        "maturity_height": {
          "type": "integer",
          "format": "int64",
          "title": "/ The height at which funds can be swept into the wallet"
        },
        "blocks_til_maturity": {
          "type": "integer",
          "format": "int32",
          "description": "Remaining # of blocks until the commitment output can be swept.\r\nNegative values indicate how many blocks have passed since becoming\r\nmature."
        },
        "recovered_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The total value of funds successfully recovered from this channel"
        },
        "pending_htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPendingHTLC"
          }
        }
      }
    },
    "PendingChannelsResponsePendingChannel": {
      "type": "object",
      "properties": {
        "remote_node_pub": {
          "type": "string"
        },
        "channel_point": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "local_balance": {
          "type": "string",
          "format": "int64"
        },
        "remote_balance": {
          "type": "string",
          "format": "int64"
        },
        "local_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "/ The minimum satoshis this node is required to reserve in its balance."
        },
        "remote_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe minimum satoshis the other node is required to reserve in its\r\nbalance."
        }
      }
    },
    "PendingChannelsResponsePendingOpenChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "/ The pending channel"
        },
        "confirmation_height": {
          "type": "integer",
          "format": "int64",
          "title": "/ The height at which this channel will be confirmed"
        },
        "commit_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe amount calculated to be paid in fees for the current set of\r\ncommitment transactions. The fee amount is persisted with the channel\r\nin order to allow the fee amount to be removed and recalculated with\r\neach channel state update, including updates that happen after a system\r\nrestart."
        },
        "commit_weight": {
          "type": "string",
          "format": "int64",
          "title": "/ The weight of the commitment transaction"
        },
        "fee_per_kw": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe required number of satoshis per kilo-weight that the requester will\r\npay at all times, for both the funding transaction and commitment\r\ntransaction. This value can later be updated once the channel is open."
        }
      }
    },
    "PendingChannelsResponseWaitingCloseChannel": {
      "type": "object",
      "properties": {
        "channel": {
          "$ref": "#/definitions/PendingChannelsResponsePendingChannel",
          "title": "/ The pending channel waiting for closing tx to confirm"
        },
        "limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The balance in satoshis encumbered in this channel"
        }
      }
    },
    "lnrpcAbandonChannelResponse": {
      "type": "object"
    },
    "lnrpcAddInvoiceResponse": {
      "type": "object",
      "properties": {
        "r_hash": {
          "type": "string",
          "format": "byte"
        },
        "payment_request": {
          "type": "string",
          "description": "*\r\nA bare-bones invoice for a payment within the Lightning Network. With the\r\ndetails of the invoice, the sender has all the data necessary to send a\r\npayment to the recipient."
        },
        "add_index": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe \"add\" index of this invoice. Each newly created invoice will increment\r\nthis index making it monotonically increasing. Callers to the\r\nSubscribeInvoices call can use this to instantly get notified of all added\r\ninvoices with an add_index greater than this one."
        }
      }
    },
    "lnrpcAddressType": {
      "type": "string",
      "enum": [
        "WITNESS_PUBKEY_HASH",
        "NESTED_PUBKEY_HASH",
        "UNUSED_WITNESS_PUBKEY_HASH",
        "UNUSED_NESTED_PUBKEY_HASH"
      ],
      "default": "WITNESS_PUBKEY_HASH",
      "description": "- `p2wkh`: Pay to witness key hash (`WITNESS_PUBKEY_HASH` = 0)\r\n- `np2wkh`: Pay to nested witness key hash (`NESTED_PUBKEY_HASH` = 1)",
      "title": "* \r\n`AddressType` has to be one of:"
    },
    "lnrpcBakeMacaroonRequest": {
      "type": "object",
      "properties": {
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcMacaroonPermission"
          },
          "description": "/ The list of permissions the new macaroon should grant."
        }
      }
    },
    "lnrpcBakeMacaroonResponse": {
      "type": "object",
      "properties": {
        "macaroon": {
          "type": "string",
          "description": "/ The hex encoded macaroon, serialized in binary format."
        }
      }
    },
    "lnrpcChain": {
      "type": "object",
      "properties": {
        "chain": {
          "type": "string",
          "title": "/ The blockchain the node is on (eg bitcoin, litecoin)"
        },
        "network": {
          "type": "string",
          "title": "/ The network the node is on (eg regtest, testnet, mainnet)"
        }
      }
    },
    "lnrpcChanBackupSnapshot": {
      "type": "object",
      "properties": {
        "single_chan_backups": {
          "$ref": "#/definitions/lnrpcChannelBackups",
          "description": "*\r\nThe set of new channels that have been added since the last channel backup\r\nsnapshot was requested."
        },
        "multi_chan_backup": {
          "$ref": "#/definitions/lnrpcMultiChanBackup",
          "description": "*\r\nA multi-channel backup that covers all open channels currently known to\r\nlnd."
        }
      }
    },
    "lnrpcChanPointShim": {
      "type": "object",
      "properties": {
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe size of the pre-crafted output to be used as the channel point for this\r\nchannel funding."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "/ The target channel point to refrence in created commitment transactions."
        },
        "local_key": {
          "$ref": "#/definitions/lnrpcKeyDescriptor",
          "description": "/ Our local key to use when creating the multi-sig output."
        },
        "remote_key": {
          "type": "string",
          "format": "byte",
          "description": "/ The key of the remote party to use when creating the multi-sig output."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nIf non-zero, then this will be used as the pending channel ID on the wire\r\nprotocol to initate the funding request. This is an optional field, and\r\nshould only be set if the responder is already expecting a specific pending\r\nchannel ID."
        }
      }
    },
    "lnrpcChangePasswordRequest": {
      "type": "object",
      "properties": {
        "current_password": {
          "type": "string",
          "format": "byte",
          "description": "*\r\ncurrent_password should be the current valid passphrase used to unlock the\r\ndaemon. When using REST, this field must be encoded as base64."
        },
        "new_password": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nnew_password should be the new passphrase that will be needed to unlock the\r\ndaemon. When using REST, this field must be encoded as base64."
        }
      }
    },
    "lnrpcChangePasswordResponse": {
      "type": "object"
    },
    "lnrpcChannel": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean",
          "format": "boolean",
          "title": "/ Whether this channel is active or not"
        },
        "remote_pubkey": {
          "type": "string",
          "title": "/ The identity pubkey of the remote node"
        },
        "channel_point": {
          "type": "string",
          "description": "*\r\nThe outpoint (txid:index) of the funding transaction. With this value, Bob\r\nwill be able to generate a signature for Alice's version of the commitment\r\ntransaction."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe unique channel ID for the channel. The first 3 bytes are the block\r\nheight, the next 3 the index within the block, and the last 2 bytes are the\r\noutput index for the channel."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "/ The total amount of funds held in this channel"
        },
        "local_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ This node's current balance in this channel"
        },
        "remote_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The counterparty's current balance in this channel"
        },
        "commit_fee": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe amount calculated to be paid in fees for the current set of commitment\r\ntransactions. The fee amount is persisted with the channel in order to\r\nallow the fee amount to be removed and recalculated with each channel state\r\nupdate, including updates that happen after a system restart."
        },
        "commit_weight": {
          "type": "string",
          "format": "int64",
          "title": "/ The weight of the commitment transaction"
        },
        "fee_per_kw": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe required number of satoshis per kilo-weight that the requester will pay\r\nat all times, for both the funding transaction and commitment transaction.\r\nThis value can later be updated once the channel is open."
        },
        "unsettled_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The unsettled balance in this channel"
        },
        "total_satoshis_sent": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe total number of satoshis we've sent within this channel."
        },
        "total_satoshis_received": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe total number of satoshis we've received within this channel."
        },
        "num_updates": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe total number of updates conducted within this channel."
        },
        "pending_htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHTLC"
          },
          "description": "*\r\nThe list of active, uncleared HTLCs currently pending within the channel."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "*\r\nThe CSV delay expressed in relative blocks. If the channel is force closed,\r\nwe will need to wait for this many blocks before we can regain our funds."
        },
        "private": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ Whether this channel is advertised to the network or not."
        },
        "initiator": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ True if we were the ones that created the channel."
        },
        "chan_status_flags": {
          "type": "string",
          "description": "/ A set of flags showing the current state of the channel."
        },
        "local_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "/ The minimum satoshis this node is required to reserve in its balance."
        },
        "remote_chan_reserve_sat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe minimum satoshis the other node is required to reserve in its balance."
        },
        "static_remote_key": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\r\nIf true, then this channel uses the modern commitment format where the key\r\nin the output of the remote party does not change each state. This makes\r\nback up and recovery easier as when the channel is closed, the funds go\r\ndirectly to that key."
        },
        "lifetime": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe number of seconds that the channel has been monitored by the channel\r\nscoring system. Scores are currently not persisted, so this value may be\r\nless than the lifetime of the channel [EXPERIMENTAL]."
        },
        "uptime": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe number of seconds that the remote peer has been observed as being online\r\nby the channel scoring system over the lifetime of the channel [EXPERIMENTAL]."
        },
        "close_address": {
          "type": "string",
          "description": "*\r\nClose address is the address that we will enforce payout to on cooperative\r\nclose if the channel was opened utilizing option upfront shutdown. This\r\nvalue can be set on channel open by setting close_address in an open channel\r\nrequest. If this value is not set, you can still choose a payout address by\r\ncooperatively closing with the delivery_address field set."
        }
      }
    },
    "lnrpcChannelAcceptRequest": {
      "type": "object",
      "properties": {
        "node_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "/ The pubkey of the node that wishes to open an inbound channel."
        },
        "chain_hash": {
          "type": "string",
          "format": "byte",
          "description": "/ The hash of the genesis block that the proposed channel resides in."
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "/ The pending channel id."
        },
        "funding_amt": {
          "type": "string",
          "format": "uint64",
          "description": "/ The funding amount in satoshis that initiator wishes to use in the channel."
        },
        "push_amt": {
          "type": "string",
          "format": "uint64",
          "description": "/ The push amount of the proposed channel in millisatoshis."
        },
        "dust_limit": {
          "type": "string",
          "format": "uint64",
          "description": "/ The dust limit of the initiator's commitment tx."
        },
        "max_value_in_flight": {
          "type": "string",
          "format": "uint64",
          "description": "/ The maximum amount of coins in millisatoshis that can be pending in this channel."
        },
        "channel_reserve": {
          "type": "string",
          "format": "uint64",
          "description": "/ The minimum amount of satoshis the initiator requires us to have at all times."
        },
        "min_htlc": {
          "type": "string",
          "format": "uint64",
          "description": "/ The smallest HTLC in millisatoshis that the initiator will accept."
        },
        "fee_per_kw": {
          "type": "string",
          "format": "uint64",
          "description": "/ The initial fee rate that the initiator suggests for both commitment transactions."
        },
        "csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "*\r\nThe number of blocks to use for the relative time lock in the pay-to-self output\r\nof both commitment transactions."
        },
        "max_accepted_htlcs": {
          "type": "integer",
          "format": "int64",
          "description": "/ The total number of incoming HTLC's that the initiator will accept."
        },
        "channel_flags": {
          "type": "integer",
          "format": "int64",
          "description": "/ A bit-field which the initiator uses to specify proposed channel behavior."
        }
      }
    },
    "lnrpcChannelBackup": {
      "type": "object",
      "properties": {
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "*\r\nIdentifies the channel that this backup belongs to."
        },
        "chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nIs an encrypted single-chan backup. this can be passed to\r\nRestoreChannelBackups, or the WalletUnlocker Init and Unlock methods in\r\norder to trigger the recovery protocol. When using REST, this field must be\r\nencoded as base64."
        }
      }
    },
    "lnrpcChannelBackups": {
      "type": "object",
      "properties": {
        "chan_backups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelBackup"
          },
          "description": "*\r\nA set of single-chan static channel backups."
        }
      }
    },
    "lnrpcChannelBalanceResponse": {
      "type": "object",
      "properties": {
        "balance": {
          "type": "string",
          "format": "int64",
          "title": "/ Sum of channels balances denominated in satoshis"
        },
        "pending_open_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ Sum of channels pending balances denominated in satoshis"
        }
      }
    },
    "lnrpcChannelCloseSummary": {
      "type": "object",
      "properties": {
        "channel_point": {
          "type": "string",
          "description": "/ The outpoint (txid:index) of the funding transaction."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "/  The unique channel ID for the channel."
        },
        "chain_hash": {
          "type": "string",
          "description": "/ The hash of the genesis block that this channel resides within."
        },
        "closing_tx_hash": {
          "type": "string",
          "description": "/ The txid of the transaction which ultimately closed this channel."
        },
        "remote_pubkey": {
          "type": "string",
          "description": "/ Public key of the remote peer that we formerly had a channel with."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "description": "/ Total capacity of the channel."
        },
        "close_height": {
          "type": "integer",
          "format": "int64",
          "description": "/ Height at which the funding transaction was spent."
        },
        "settled_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ Settled balance at the time of channel closure"
        },
        "time_locked_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The sum of all the time-locked outputs at the time of channel closure"
        },
        "close_type": {
          "$ref": "#/definitions/ChannelCloseSummaryClosureType",
          "description": "/ Details on how the channel was closed."
        },
        "open_initiator": {
          "$ref": "#/definitions/ChannelCloseSummaryInitiator",
          "description": "*\r\nOpen initiator is the party that initiated opening the channel. Note that\r\nthis value may be unknown if the channel was closed before we migrated to\r\nstore open channel information after close."
        },
        "close_initiator": {
          "$ref": "#/definitions/ChannelCloseSummaryInitiator",
          "description": "*\r\nClose initiator indicates which party initiated the close. This value will\r\nbe unknown for channels that were cooperatively closed before we started\r\ntracking cooperative close initiators. Note that this indicates which party\r\ninitiated a close, and it is possible for both to initiate cooperative or\r\nforce closes, although only one party's close will be confirmed on chain."
        }
      }
    },
    "lnrpcChannelCloseUpdate": {
      "type": "object",
      "properties": {
        "closing_txid": {
          "type": "string",
          "format": "byte"
        },
        "success": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "lnrpcChannelEdge": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe unique channel ID for the channel. The first 3 bytes are the block\r\nheight, the next 3 the index within the block, and the last 2 bytes are the\r\noutput index for the channel."
        },
        "chan_point": {
          "type": "string"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "node1_pub": {
          "type": "string"
        },
        "node2_pub": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "node1_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        },
        "node2_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        }
      },
      "description": "*\r\nA fully authenticated channel along with all its unique attributes.\r\nOnce an authenticated channel announcement has been processed on the network,\r\nthen an instance of ChannelEdgeInfo encapsulating the channels attributes is\r\nstored. The other portions relevant to routing policy of a channel are stored\r\nwithin a ChannelEdgePolicy for each direction of the channel."
    },
    "lnrpcChannelEdgeUpdate": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe unique channel ID for the channel. The first 3 bytes are the block\r\nheight, the next 3 the index within the block, and the last 2 bytes are the\r\noutput index for the channel."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "routing_policy": {
          "$ref": "#/definitions/lnrpcRoutingPolicy"
        },
        "advertising_node": {
          "type": "string"
        },
        "connecting_node": {
          "type": "string"
        }
      }
    },
    "lnrpcChannelEventUpdate": {
      "type": "object",
      "properties": {
        "open_channel": {
          "$ref": "#/definitions/lnrpcChannel"
        },
        "closed_channel": {
          "$ref": "#/definitions/lnrpcChannelCloseSummary"
        },
        "active_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "inactive_channel": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        },
        "pending_open_channel": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "type": {
          "$ref": "#/definitions/ChannelEventUpdateUpdateType"
        }
      }
    },
    "lnrpcChannelFeeReport": {
      "type": "object",
      "properties": {
        "chan_point": {
          "type": "string",
          "description": "/ The channel that this fee report belongs to."
        },
        "base_fee_msat": {
          "type": "string",
          "format": "int64",
          "description": "/ The base fee charged regardless of the number of milli-satoshis sent."
        },
        "fee_per_mil": {
          "type": "string",
          "format": "int64",
          "description": "/ The amount charged per milli-satoshis transferred expressed in millionths of a satoshi."
        },
        "fee_rate": {
          "type": "number",
          "format": "double",
          "description": "/ The effective fee rate in milli-satoshis. Computed by dividing the fee_per_mil value by 1 million."
        }
      }
    },
    "lnrpcChannelGraph": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcLightningNode"
          },
          "title": "/ The list of `LightningNode`s in this channel graph"
        },
        "edges": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdge"
          },
          "title": "/ The list of `ChannelEdge`s in this channel graph"
        }
      },
      "description": "/ Returns a new instance of the directed channel graph."
    },
    "lnrpcChannelOpenUpdate": {
      "type": "object",
      "properties": {
        "channel_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        }
      }
    },
    "lnrpcChannelPoint": {
      "type": "object",
      "properties": {
        "funding_txid_bytes": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nTxid of the funding transaction. When using REST, this field must be\r\nencoded as base64."
        },
        "funding_txid_str": {
          "type": "string",
          "description": "*\r\nHex-encoded string representing the byte-reversed hash of the funding\r\ntransaction."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "title": "/ The index of the output of the funding transaction"
        }
      }
    },
    "lnrpcCloseStatusUpdate": {
      "type": "object",
      "properties": {
        "close_pending": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "chan_close": {
          "$ref": "#/definitions/lnrpcChannelCloseUpdate"
        }
      }
    },
    "lnrpcClosedChannelUpdate": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe unique channel ID for the channel. The first 3 bytes are the block\r\nheight, the next 3 the index within the block, and the last 2 bytes are the\r\noutput index for the channel."
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "closed_height": {
          "type": "integer",
          "format": "int64"
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint"
        }
      }
    },
    "lnrpcClosedChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelCloseSummary"
          }
        }
      }
    },
    "lnrpcConnectPeerRequest": {
      "type": "object",
      "properties": {
        "addr": {
          "$ref": "#/definitions/lnrpcLightningAddress",
          "title": "/ Lightning address of the peer, in the format `\u003cpubkey\u003e@host`"
        },
        "perm": {
          "type": "boolean",
          "format": "boolean",
          "description": "* If set, the daemon will attempt to persistently connect to the target\r\npeer. Otherwise, the call will be synchronous."
        }
      }
    },
    "lnrpcConnectPeerResponse": {
      "type": "object"
    },
    "lnrpcDebugLevelResponse": {
      "type": "object",
      "properties": {
        "sub_systems": {
          "type": "string"
        }
      }
    },
    "lnrpcDeleteAllPaymentsResponse": {
      "type": "object"
    },
    "lnrpcDisconnectPeerResponse": {
      "type": "object"
    },
    "lnrpcEdgeLocator": {
      "type": "object",
      "properties": {
        "channel_id": {
          "type": "string",
          "format": "uint64",
          "description": "/ The short channel id of this edge."
        },
        "direction_reverse": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\r\nThe direction of this edge. If direction_reverse is false, the direction\r\nof this edge is from the channel endpoint with the lexicographically smaller\r\npub key to the endpoint with the larger pub key. If direction_reverse is\r\nis true, the edge goes the other way."
        }
      }
    },
    "lnrpcEstimateFeeResponse": {
      "type": "object",
      "properties": {
        "fee_sat": {
          "type": "string",
          "format": "int64",
          "description": "/ The total fee in satoshis."
        },
        "feerate_sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "/ The fee rate in satoshi/byte."
        }
      }
    },
    "lnrpcFeature": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "is_required": {
          "type": "boolean",
          "format": "boolean"
        },
        "is_known": {
          "type": "boolean",
          "format": "boolean"
        }
      }
    },
    "lnrpcFeatureBit": {
      "type": "string",
      "enum": [
        "DATALOSS_PROTECT_REQ",
        "DATALOSS_PROTECT_OPT",
        "INITIAL_ROUING_SYNC",
        "UPFRONT_SHUTDOWN_SCRIPT_REQ",
        "UPFRONT_SHUTDOWN_SCRIPT_OPT",
        "GOSSIP_QUERIES_REQ",
        "GOSSIP_QUERIES_OPT",
        "TLV_ONION_REQ",
        "TLV_ONION_OPT",
        "EXT_GOSSIP_QUERIES_REQ",
        "EXT_GOSSIP_QUERIES_OPT",
        "STATIC_REMOTE_KEY_REQ",
        "STATIC_REMOTE_KEY_OPT",
        "PAYMENT_ADDR_REQ",
        "PAYMENT_ADDR_OPT",
        "MPP_REQ",
        "MPP_OPT"
      ],
      "default": "DATALOSS_PROTECT_REQ"
    },
    "lnrpcFeeLimit": {
      "type": "object",
      "properties": {
        "fixed": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe fee limit expressed as a fixed amount of satoshis.\r\n\nThe fields fixed and fixed_msat are mutually exclusive."
        },
        "fixed_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe fee limit expressed as a fixed amount of millisatoshis.\r\n\nThe fields fixed and fixed_msat are mutually exclusive."
        },
        "percent": {
          "type": "string",
          "format": "int64",
          "description": "/ The fee limit expressed as a percentage of the payment amount."
        }
      }
    },
    "lnrpcFeeReportResponse": {
      "type": "object",
      "properties": {
        "channel_fees": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelFeeReport"
          },
          "description": "/ An array of channel fee reports which describes the current fee schedule for each channel."
        },
        "day_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount of fee revenue (in satoshis) the switch has collected over the past 24 hrs."
        },
        "week_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount of fee revenue (in satoshis) the switch has collected over the past 1 week."
        },
        "month_fee_sum": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount of fee revenue (in satoshis) the switch has collected over the past 1 month."
        }
      }
    },
    "lnrpcForwardingEvent": {
      "type": "object",
      "properties": {
        "timestamp": {
          "type": "string",
          "format": "uint64",
          "description": "/ Timestamp is the time (unix epoch offset) that this circuit was completed."
        },
        "chan_id_in": {
          "type": "string",
          "format": "uint64",
          "description": "/ The incoming channel ID that carried the HTLC that created the circuit."
        },
        "chan_id_out": {
          "type": "string",
          "format": "uint64",
          "description": "/ The outgoing channel ID that carried the preimage that completed the circuit."
        },
        "amt_in": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount (in satoshis) of the incoming HTLC that created half the circuit."
        },
        "amt_out": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount (in satoshis) of the outgoing HTLC that created the second half of the circuit."
        },
        "fee": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total fee (in satoshis) that this payment circuit carried."
        },
        "fee_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total fee (in milli-satoshis) that this payment circuit carried."
        },
        "amt_in_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount (in milli-satoshis) of the incoming HTLC that created half the circuit."
        },
        "amt_out_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount (in milli-satoshis) of the outgoing HTLC that created the second half of the circuit."
        }
      }
    },
    "lnrpcForwardingHistoryRequest": {
      "type": "object",
      "properties": {
        "start_time": {
          "type": "string",
          "format": "uint64",
          "description": "/ Start time is the starting point of the forwarding history request. All records beyond this point will be included, respecting the end time, and the index offset."
        },
        "end_time": {
          "type": "string",
          "format": "uint64",
          "description": "/ End time is the end point of the forwarding history request. The response will carry at most 50k records between the start time and the end time. The index offset can be used to implement pagination."
        },
        "index_offset": {
          "type": "integer",
          "format": "int64",
          "description": "/ Index offset is the offset in the time series to start at. As each response can only contain 50k records, callers can use this to skip around within a packed time series."
        },
        "num_max_events": {
          "type": "integer",
          "format": "int64",
          "description": "/ The max number of events to return in the response to this query."
        }
      }
    },
    "lnrpcForwardingHistoryResponse": {
      "type": "object",
      "properties": {
        "forwarding_events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcForwardingEvent"
          },
          "description": "/ A list of forwarding events from the time slice of the time series specified in the request."
        },
        "last_offset_index": {
          "type": "integer",
          "format": "int64",
          "description": "/ The index of the last time in the set of returned forwarding events. Can be used to seek further, pagination style."
        }
      }
    },
    "lnrpcFundingShim": {
      "type": "object",
      "properties": {
        "chan_point_shim": {
          "$ref": "#/definitions/lnrpcChanPointShim"
        }
      }
    },
    "lnrpcFundingShimCancel": {
      "type": "object",
      "properties": {
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "/ The pending channel ID of the channel to cancel the funding shim for."
        }
      }
    },
    "lnrpcFundingStateStepResp": {
      "type": "object"
    },
    "lnrpcGenSeedResponse": {
      "type": "object",
      "properties": {
        "cipher_seed_mnemonic": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "*\r\ncipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed\r\ncipher seed obtained by the user. This field is optional, as if not\r\nprovided, then the daemon will generate a new cipher seed for the user.\r\nOtherwise, then the daemon will attempt to recover the wallet state linked\r\nto this cipher seed."
        },
        "enciphered_seed": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nenciphered_seed are the raw aezeed cipher seed bytes. This is the raw\r\ncipher text before run through our mnemonic encoding scheme."
        }
      }
    },
    "lnrpcGetInfoResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string",
          "description": "/ The version of the LND software that the node is running."
        },
        "identity_pubkey": {
          "type": "string",
          "description": "/ The identity pubkey of the current node."
        },
        "alias": {
          "type": "string",
          "title": "/ If applicable, the alias of the current node, e.g. \"bob\""
        },
        "color": {
          "type": "string",
          "title": "/ The color of the current node in hex code format"
        },
        "num_pending_channels": {
          "type": "integer",
          "format": "int64",
          "title": "/ Number of pending channels"
        },
        "num_active_channels": {
          "type": "integer",
          "format": "int64",
          "title": "/ Number of active channels"
        },
        "num_inactive_channels": {
          "type": "integer",
          "format": "int64",
          "title": "/ Number of inactive channels"
        },
        "num_peers": {
          "type": "integer",
          "format": "int64",
          "title": "/ Number of peers"
        },
        "block_height": {
          "type": "integer",
          "format": "int64",
          "title": "/ The node's current view of the height of the best block"
        },
        "block_hash": {
          "type": "string",
          "title": "/ The node's current view of the hash of the best block"
        },
        "best_header_timestamp": {
          "type": "string",
          "format": "int64",
          "title": "/ Timestamp of the block best known to the wallet"
        },
        "synced_to_chain": {
          "type": "boolean",
          "format": "boolean",
          "title": "/ Whether the wallet's view is synced to the main chain"
        },
        "synced_to_graph": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether we consider ourselves synced with the public channel graph."
        },
        "testnet": {
          "type": "boolean",
          "format": "boolean",
          "title": "* \r\nWhether the current node is connected to testnet. This field is \r\ndeprecated and the network field should be used instead"
        },
        "chains": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChain"
          },
          "title": "/ A list of active chains the node is connected to"
        },
        "uris": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "/ The URIs of the current node."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "Features that our node has advertised in our init message, node\r\nannouncements and invoices."
        }
      }
    },
    "lnrpcGraphTopologyUpdate": {
      "type": "object",
      "properties": {
        "node_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeUpdate"
          }
        },
        "channel_updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdgeUpdate"
          }
        },
        "closed_chans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcClosedChannelUpdate"
          }
        }
      }
    },
    "lnrpcHTLC": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "boolean",
          "format": "boolean"
        },
        "amount": {
          "type": "string",
          "format": "int64"
        },
        "hash_lock": {
          "type": "string",
          "format": "byte"
        },
        "expiration_height": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcHTLCAttempt": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/HTLCAttemptHTLCStatus",
          "description": "/ The status of the HTLC."
        },
        "route": {
          "$ref": "#/definitions/lnrpcRoute",
          "description": "/ The route taken by this HTLC."
        },
        "attempt_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "/ The time in UNIX nanoseconds at which this HTLC was sent."
        },
        "resolve_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe time in UNIX nanoseconds at which this HTLC was settled or failed.\r\nThis value will not be set if the HTLC is still IN_FLIGHT."
        }
      }
    },
    "lnrpcHop": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe unique channel ID for the channel. The first 3 bytes are the block\r\nheight, the next 3 the index within the block, and the last 2 bytes are the\r\noutput index for the channel."
        },
        "chan_capacity": {
          "type": "string",
          "format": "int64"
        },
        "amt_to_forward": {
          "type": "string",
          "format": "int64"
        },
        "fee": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "integer",
          "format": "int64"
        },
        "amt_to_forward_msat": {
          "type": "string",
          "format": "int64"
        },
        "fee_msat": {
          "type": "string",
          "format": "int64"
        },
        "pub_key": {
          "type": "string",
          "description": "*\r\nAn optional public key of the hop. If the public key is given, the payment\r\ncan be executed without relying on a copy of the channel graph."
        },
        "tlv_payload": {
          "type": "boolean",
          "format": "boolean",
          "description": "* \r\nIf set to true, then this hop will be encoded using the new variable length\r\nTLV format. Note that if any custom tlv_records below are specified, then\r\nthis field MUST be set to true for them to be encoded properly."
        },
        "mpp_record": {
          "$ref": "#/definitions/lnrpcMPPRecord",
          "description": "*\r\nAn optional TLV record tha singals the use of an MPP payment. If present,\r\nthe receiver will enforce that that the same mpp_record is included in the\r\nfinal hop payload of all non-zero payments in the HTLC set. If empty, a\r\nregular single-shot payment is or was attempted."
        },
        "custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "*\r\nAn optional set of key-value TLV records. This is useful within the context\r\nof the SendToRoute call as it allows callers to specify arbitrary K-V pairs\r\nto drop off at each hop within the onion."
        }
      }
    },
    "lnrpcHopHint": {
      "type": "object",
      "properties": {
        "node_id": {
          "type": "string",
          "description": "/ The public key of the node at the start of the channel."
        },
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "/ The unique identifier of the channel."
        },
        "fee_base_msat": {
          "type": "integer",
          "format": "int64",
          "description": "/ The base fee of the channel denominated in millisatoshis."
        },
        "fee_proportional_millionths": {
          "type": "integer",
          "format": "int64",
          "description": "*\r\nThe fee rate of the channel for sending one satoshi across it denominated in\r\nmillionths of a satoshi."
        },
        "cltv_expiry_delta": {
          "type": "integer",
          "format": "int64",
          "description": "/ The time-lock delta of the channel."
        }
      }
    },
    "lnrpcInitWalletRequest": {
      "type": "object",
      "properties": {
        "wallet_password": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nwallet_password is the passphrase that should be used to encrypt the\r\nwallet. This MUST be at least 8 chars in length. After creation, this\r\npassword is required to unlock the daemon. When using REST, this field\r\nmust be encoded as base64."
        },
        "cipher_seed_mnemonic": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "*\r\ncipher_seed_mnemonic is a 24-word mnemonic that encodes a prior aezeed\r\ncipher seed obtained by the user. This may have been generated by the\r\nGenSeed method, or be an existing seed."
        },
        "aezeed_passphrase": {
          "type": "string",
          "format": "byte",
          "description": "*\r\naezeed_passphrase is an optional user provided passphrase that will be used\r\nto encrypt the generated aezeed cipher seed. When using REST, this field\r\nmust be encoded as base64."
        },
        "recovery_window": {
          "type": "integer",
          "format": "int32",
          "description": "*\r\nrecovery_window is an optional argument specifying the address lookahead\r\nwhen restoring a wallet seed. The recovery window applies to each\r\nindividual branch of the BIP44 derivation paths. Supplying a recovery\r\nwindow of zero indicates that no addresses should be recovered, such after\r\nthe first initialization of the wallet."
        },
        "channel_backups": {
          "$ref": "#/definitions/lnrpcChanBackupSnapshot",
          "description": "*\r\nchannel_backups is an optional argument that allows clients to recover the\r\nsettled funds within a set of channels. This should be populated if the\r\nuser was unable to close out all channels and sweep funds before partial or\r\ntotal data loss occurred. If specified, then after on-chain recovery of\r\nfunds, lnd begin to carry out the data loss recovery protocol in order to\r\nrecover the funds in each channel from a remote force closed transaction."
        }
      }
    },
    "lnrpcInitWalletResponse": {
      "type": "object"
    },
    "lnrpcInvoice": {
      "type": "object",
      "properties": {
        "memo": {
          "type": "string",
          "description": "*\r\nAn optional memo to attach along with the invoice. Used for record keeping\r\npurposes for the invoice's creator, and will also be set in the description\r\nfield of the encoded payment request if the description_hash field is not\r\nbeing used."
        },
        "r_preimage": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe hex-encoded preimage (32 byte) which will allow settling an incoming\r\nHTLC payable to this preimage. When using REST, this field must be encoded\r\nas base64."
        },
        "r_hash": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe hash of the preimage. When using REST, this field must be encoded as\r\nbase64."
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "The fields value and value_msat are mutually exclusive.",
          "title": "*\r\nThe value of this invoice in satoshis"
        },
        "value_msat": {
          "type": "string",
          "format": "int64",
          "description": "The fields value and value_msat are mutually exclusive.",
          "title": "*\r\nThe value of this invoice in millisatoshis"
        },
        "settled": {
          "type": "boolean",
          "format": "boolean",
          "title": "/ Whether this invoice has been fulfilled"
        },
        "creation_date": {
          "type": "string",
          "format": "int64",
          "title": "/ When this invoice was created"
        },
        "settle_date": {
          "type": "string",
          "format": "int64",
          "title": "/ When this invoice was settled"
        },
        "payment_request": {
          "type": "string",
          "description": "*\r\nA bare-bones invoice for a payment within the Lightning Network. With the\r\ndetails of the invoice, the sender has all the data necessary to send a\r\npayment to the recipient."
        },
        "description_hash": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nHash (SHA-256) of a description of the payment. Used if the description of\r\npayment (memo) is too long to naturally fit within the description field\r\nof an encoded payment request. When using REST, this field must be encoded\r\nas base64."
        },
        "expiry": {
          "type": "string",
          "format": "int64",
          "description": "/ Payment request expiry time in seconds. Default is 3600 (1 hour)."
        },
        "fallback_addr": {
          "type": "string",
          "description": "/ Fallback on-chain address."
        },
        "cltv_expiry": {
          "type": "string",
          "format": "uint64",
          "description": "/ Delta to use for the time-lock of the CLTV extended to the final hop."
        },
        "route_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRouteHint"
          },
          "description": "*\r\nRoute hints that can each be individually used to assist in reaching the\r\ninvoice's destination."
        },
        "private": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ Whether this invoice should include routing hints for private channels."
        },
        "add_index": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe \"add\" index of this invoice. Each newly created invoice will increment\r\nthis index making it monotonically increasing. Callers to the\r\nSubscribeInvoices call can use this to instantly get notified of all added\r\ninvoices with an add_index greater than this one."
        },
        "settle_index": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe \"settle\" index of this invoice. Each newly settled invoice will\r\nincrement this index making it monotonically increasing. Callers to the\r\nSubscribeInvoices call can use this to instantly get notified of all\r\nsettled invoices with an settle_index greater than this one."
        },
        "amt_paid": {
          "type": "string",
          "format": "int64",
          "description": "/ Deprecated, use amt_paid_sat or amt_paid_msat."
        },
        "amt_paid_sat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe amount that was accepted for this invoice, in satoshis. This will ONLY\r\nbe set if this invoice has been settled. We provide this field as if the\r\ninvoice was created with a zero value, then we need to record what amount\r\nwas ultimately accepted. Additionally, it's possible that the sender paid\r\nMORE that was specified in the original invoice. So we'll record that here\r\nas well."
        },
        "amt_paid_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe amount that was accepted for this invoice, in millisatoshis. This will\r\nONLY be set if this invoice has been settled. We provide this field as if\r\nthe invoice was created with a zero value, then we need to record what\r\namount was ultimately accepted. Additionally, it's possible that the sender\r\npaid MORE that was specified in the original invoice. So we'll record that\r\nhere as well."
        },
        "state": {
          "$ref": "#/definitions/InvoiceInvoiceState",
          "description": "*\r\nThe state the invoice is in."
        },
        "htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcInvoiceHTLC"
          },
          "description": "/ List of HTLCs paying to this invoice [EXPERIMENTAL]."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "/ List of features advertised on the invoice."
        },
        "is_keysend": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\r\nIndicates if this invoice was a spontaneous payment that arrived via keysend\r\n[EXPERIMENTAL]."
        }
      }
    },
    "lnrpcInvoiceHTLC": {
      "type": "object",
      "properties": {
        "chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "/ Short channel id over which the htlc was received."
        },
        "htlc_index": {
          "type": "string",
          "format": "uint64",
          "description": "/ Index identifying the htlc on the channel."
        },
        "amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ The amount of the htlc in msat."
        },
        "accept_height": {
          "type": "integer",
          "format": "int32",
          "description": "/ Block height at which this htlc was accepted."
        },
        "accept_time": {
          "type": "string",
          "format": "int64",
          "description": "/ Time at which this htlc was accepted."
        },
        "resolve_time": {
          "type": "string",
          "format": "int64",
          "description": "/ Time at which this htlc was settled or canceled."
        },
        "expiry_height": {
          "type": "integer",
          "format": "int32",
          "description": "/ Block height at which this htlc expires."
        },
        "state": {
          "$ref": "#/definitions/lnrpcInvoiceHTLCState",
          "description": "/ Current state the htlc is in."
        },
        "custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "/ Custom tlv records."
        },
        "mpp_total_amt_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ The total amount of the mpp payment in msat."
        }
      },
      "title": "/ Details of an HTLC that paid to an invoice"
    },
    "lnrpcInvoiceHTLCState": {
      "type": "string",
      "enum": [
        "ACCEPTED",
        "SETTLED",
        "CANCELED"
      ],
      "default": "ACCEPTED"
    },
    "lnrpcKeyDescriptor": {
      "type": "object",
      "properties": {
        "raw_key_bytes": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe raw bytes of the key being identified."
        },
        "key_loc": {
          "$ref": "#/definitions/lnrpcKeyLocator",
          "description": "* \r\nThe key locator that identifies which key to use for signing."
        }
      }
    },
    "lnrpcKeyLocator": {
      "type": "object",
      "properties": {
        "key_family": {
          "type": "integer",
          "format": "int32",
          "description": "/ The family of key being identified."
        },
        "key_index": {
          "type": "integer",
          "format": "int32",
          "description": "/ The precise index of the key being identified."
        }
      }
    },
    "lnrpcLightningAddress": {
      "type": "object",
      "properties": {
        "pubkey": {
          "type": "string",
          "title": "/ The identity pubkey of the Lightning node"
        },
        "host": {
          "type": "string",
          "title": "/ The network location of the lightning node, e.g. `69.69.69.69:1337` or `localhost:10011`"
        }
      }
    },
    "lnrpcLightningNode": {
      "type": "object",
      "properties": {
        "last_update": {
          "type": "integer",
          "format": "int64"
        },
        "pub_key": {
          "type": "string"
        },
        "alias": {
          "type": "string"
        },
        "addresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcNodeAddress"
          }
        },
        "color": {
          "type": "string"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          }
        }
      },
      "description": "*\r\nAn individual vertex/node within the channel graph. A node is\r\nconnected to other nodes by one or more channel edges emanating from it. As the\r\ngraph is directed, a node will also have an incoming edge attached to it for\r\neach outgoing edge."
    },
    "lnrpcListChannelsResponse": {
      "type": "object",
      "properties": {
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannel"
          },
          "title": "/ The list of active channels"
        }
      }
    },
    "lnrpcListInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcInvoice"
          },
          "description": "*\r\nA list of invoices from the time slice of the time series specified in the\r\nrequest."
        },
        "last_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe index of the last item in the set of returned invoices. This can be used\r\nto seek further, pagination style."
        },
        "first_index_offset": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe index of the last item in the set of returned invoices. This can be used\r\nto seek backwards, pagination style."
        }
      }
    },
    "lnrpcListPaymentsResponse": {
      "type": "object",
      "properties": {
        "payments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPayment"
          },
          "title": "/ The list of payments"
        }
      }
    },
    "lnrpcListPeersResponse": {
      "type": "object",
      "properties": {
        "peers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcPeer"
          },
          "title": "/ The list of currently connected peers"
        }
      }
    },
    "lnrpcListUnspentResponse": {
      "type": "object",
      "properties": {
        "utxos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcUtxo"
          },
          "title": "/ A list of utxos"
        }
      }
    },
    "lnrpcMPPRecord": {
      "type": "object",
      "properties": {
        "payment_addr": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nA unique, random identifier used to authenticate the sender as the intended\r\npayer of a multi-path payment. The payment_addr must be the same for all\r\nsubpayments, and match the payment_addr provided in the receiver's invoice.\r\nThe same payment_addr must be used on all subpayments."
        },
        "total_amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe total amount in milli-satoshis being sent as part of a larger multi-path\r\npayment. The caller is responsible for ensuring subpayments to the same node\r\nand payment_hash sum exactly to total_amt_msat. The same\r\ntotal_amt_msat must be used on all subpayments."
        }
      }
    },
    "lnrpcMacaroonPermission": {
      "type": "object",
      "properties": {
        "entity": {
          "type": "string",
          "description": "/ The entity a permission grants access to."
        },
        "action": {
          "type": "string",
          "description": "/ The action that is granted."
        }
      }
    },
    "lnrpcMultiChanBackup": {
      "type": "object",
      "properties": {
        "chan_points": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelPoint"
          },
          "description": "*\r\nIs the set of all channels that are included in this multi-channel backup."
        },
        "multi_chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nA single encrypted blob containing all the static channel backups of the\r\nchannel listed above. This can be stored as a single file or blob, and\r\nsafely be replaced with any prior/future versions. When using REST, this\r\nfield must be encoded as base64."
        }
      }
    },
    "lnrpcNetworkInfo": {
      "type": "object",
      "properties": {
        "graph_diameter": {
          "type": "integer",
          "format": "int64"
        },
        "avg_out_degree": {
          "type": "number",
          "format": "double"
        },
        "max_out_degree": {
          "type": "integer",
          "format": "int64"
        },
        "num_nodes": {
          "type": "integer",
          "format": "int64"
        },
        "num_channels": {
          "type": "integer",
          "format": "int64"
        },
        "total_network_capacity": {
          "type": "string",
          "format": "int64"
        },
        "avg_channel_size": {
          "type": "number",
          "format": "double"
        },
        "min_channel_size": {
          "type": "string",
          "format": "int64"
        },
        "max_channel_size": {
          "type": "string",
          "format": "int64"
        },
        "median_channel_size_sat": {
          "type": "string",
          "format": "int64"
        },
        "num_zombie_chans": {
          "type": "string",
          "format": "uint64",
          "description": "The number of edges marked as zombies."
        }
      }
    },
    "lnrpcNewAddressResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "/ The newly generated wallet address"
        }
      }
    },
    "lnrpcNodeAddress": {
      "type": "object",
      "properties": {
        "network": {
          "type": "string"
        },
        "addr": {
          "type": "string"
        }
      }
    },
    "lnrpcNodeInfo": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/lnrpcLightningNode",
          "description": "*\r\nAn individual vertex/node within the channel graph. A node is\r\nconnected to other nodes by one or more channel edges emanating from it. As\r\nthe graph is directed, a node will also have an incoming edge attached to\r\nit for each outgoing edge."
        },
        "num_channels": {
          "type": "integer",
          "format": "int64",
          "description": "/ The total number of channels for the node."
        },
        "total_capacity": {
          "type": "string",
          "format": "int64",
          "description": "/ The sum of all channels capacity for the node, denominated in satoshis."
        },
        "channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcChannelEdge"
          },
          "description": "/ A list of all public channels for the node."
        }
      }
    },
    "lnrpcNodePair": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe sending node of the pair. When using REST, this field must be encoded as\r\nbase64."
        },
        "to": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe receiving node of the pair. When using REST, this field must be encoded\r\nas base64."
        }
      }
    },
    "lnrpcNodeUpdate": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "identity_key": {
          "type": "string"
        },
        "global_features": {
          "type": "string",
          "format": "byte"
        },
        "alias": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      }
    },
    "lnrpcOpenChannelRequest": {
      "type": "object",
      "properties": {
        "node_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe pubkey of the node to open a channel with. When using REST, this field\r\nmust be encoded as base64."
        },
        "node_pubkey_string": {
          "type": "string",
          "description": "*\r\nThe hex encoded pubkey of the node to open a channel with. Deprecated now\r\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "local_funding_amount": {
          "type": "string",
          "format": "int64",
          "title": "/ The number of satoshis the wallet should commit to the channel"
        },
        "push_sat": {
          "type": "string",
          "format": "int64",
          "title": "/ The number of satoshis to push to the remote side as part of the initial commitment state"
        },
        "target_conf": {
          "type": "integer",
          "format": "int32",
          "description": "/ The target number of blocks that the funding transaction should be confirmed by."
        },
        "sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "/ A manual fee rate set in sat/byte that should be used when crafting the funding transaction."
        },
        "private": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ Whether this channel should be private, not announced to the greater network."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "int64",
          "description": "/ The minimum value in millisatoshi we will require for incoming HTLCs on the channel."
        },
        "remote_csv_delay": {
          "type": "integer",
          "format": "int64",
          "description": "/ The delay we require on the remote's commitment transaction. If this is not set, it will be scaled automatically with the channel size."
        },
        "min_confs": {
          "type": "integer",
          "format": "int32",
          "description": "/ The minimum number of confirmations each one of your outputs used for the funding transaction must satisfy."
        },
        "spend_unconfirmed": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ Whether unconfirmed outputs should be used as inputs for the funding transaction."
        },
        "close_address": {
          "type": "string",
          "description": "Close address is an optional address which specifies the address to which\r\nfunds should be paid out to upon cooperative close. This field may only be\r\nset if the peer supports the option upfront feature bit (call listpeers\r\nto check). The remote peer will only accept cooperative closes to this\r\naddress if it is set.\r\n\nNote: If this value is set on channel creation, you will *not* be able to\r\ncooperatively close out to a different address."
        },
        "funding_shim": {
          "$ref": "#/definitions/lnrpcFundingShim",
          "description": "*\r\nFunding shims are an optional argument that allow the caller to intercept\r\ncertain funding functionality. For example, a shim can be provided to use a\r\nparticular key for the commitment key (ideally cold) rather than use one\r\nthat is generated by the wallet as normal, or signal that signing will be\r\ncarried out in an interactive manner (PSBT based)."
        }
      }
    },
    "lnrpcOpenStatusUpdate": {
      "type": "object",
      "properties": {
        "chan_pending": {
          "$ref": "#/definitions/lnrpcPendingUpdate"
        },
        "chan_open": {
          "$ref": "#/definitions/lnrpcChannelOpenUpdate"
        },
        "pending_chan_id": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe pending channel ID of the created channel. This value may be used to\r\nfurther the funding flow manually via the FundingStateStep method."
        }
      }
    },
    "lnrpcOutPoint": {
      "type": "object",
      "properties": {
        "txid_bytes": {
          "type": "string",
          "format": "byte",
          "description": "/ Raw bytes representing the transaction id."
        },
        "txid_str": {
          "type": "string",
          "description": "/ Reversed, hex-encoded string representing the transaction id."
        },
        "output_index": {
          "type": "integer",
          "format": "int64",
          "description": "/ The index of the output on the transaction."
        }
      }
    },
    "lnrpcPayReq": {
      "type": "object",
      "properties": {
        "destination": {
          "type": "string"
        },
        "payment_hash": {
          "type": "string"
        },
        "num_satoshis": {
          "type": "string",
          "format": "int64"
        },
        "timestamp": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "description_hash": {
          "type": "string"
        },
        "fallback_addr": {
          "type": "string"
        },
        "cltv_expiry": {
          "type": "string",
          "format": "int64"
        },
        "route_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRouteHint"
          }
        },
        "payment_addr": {
          "type": "string",
          "format": "byte"
        },
        "num_msat": {
          "type": "string",
          "format": "int64"
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          }
        }
      }
    },
    "lnrpcPayment": {
      "type": "object",
      "properties": {
        "payment_hash": {
          "type": "string",
          "title": "/ The payment hash"
        },
        "value": {
          "type": "string",
          "format": "int64",
          "description": "/ Deprecated, use value_sat or value_msat."
        },
        "creation_date": {
          "type": "string",
          "format": "int64",
          "title": "/ Deprecated, use creation_time_ns"
        },
        "path": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "/ The path this payment took."
        },
        "fee": {
          "type": "string",
          "format": "int64",
          "description": "/ Deprecated, use fee_sat or fee_msat."
        },
        "payment_preimage": {
          "type": "string",
          "title": "/ The payment preimage"
        },
        "value_sat": {
          "type": "string",
          "format": "int64",
          "title": "/ The value of the payment in satoshis"
        },
        "value_msat": {
          "type": "string",
          "format": "int64",
          "title": "/ The value of the payment in milli-satoshis"
        },
        "payment_request": {
          "type": "string",
          "description": "/ The optional payment request being fulfilled."
        },
        "status": {
          "$ref": "#/definitions/PaymentPaymentStatus",
          "description": "The status of the payment."
        },
        "fee_sat": {
          "type": "string",
          "format": "int64",
          "title": "/  The fee paid for this payment in satoshis"
        },
        "fee_msat": {
          "type": "string",
          "format": "int64",
          "title": "/  The fee paid for this payment in milli-satoshis"
        },
        "creation_time_ns": {
          "type": "string",
          "format": "int64",
          "description": "/ The time in UNIX nanoseconds at which the payment was created."
        },
        "htlcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHTLCAttempt"
          },
          "description": "/ The HTLCs made in attempt to settle the payment [EXPERIMENTAL]."
        }
      }
    },
    "lnrpcPeer": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "title": "/ The identity pubkey of the peer"
        },
        "address": {
          "type": "string",
          "title": "/ Network address of the peer; eg `127.0.0.1:10011`"
        },
        "bytes_sent": {
          "type": "string",
          "format": "uint64",
          "title": "/ Bytes of data transmitted to this peer"
        },
        "bytes_recv": {
          "type": "string",
          "format": "uint64",
          "title": "/ Bytes of data transmitted from this peer"
        },
        "sat_sent": {
          "type": "string",
          "format": "int64",
          "title": "/ Satoshis sent to this peer"
        },
        "sat_recv": {
          "type": "string",
          "format": "int64",
          "title": "/ Satoshis received from this peer"
        },
        "inbound": {
          "type": "boolean",
          "format": "boolean",
          "title": "/ A channel is inbound if the counterparty initiated the channel"
        },
        "ping_time": {
          "type": "string",
          "format": "int64",
          "title": "/ Ping time to this peer"
        },
        "sync_type": {
          "$ref": "#/definitions/PeerSyncType",
          "description": "The type of sync we are currently performing with this peer."
        },
        "features": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/lnrpcFeature"
          },
          "description": "/ Features advertised by the remote peer in their init message."
        }
      }
    },
    "lnrpcPeerEvent": {
      "type": "object",
      "properties": {
        "pub_key": {
          "type": "string",
          "description": "/ The identity pubkey of the peer."
        },
        "type": {
          "$ref": "#/definitions/PeerEventEventType"
        }
      }
    },
    "lnrpcPendingChannelsResponse": {
      "type": "object",
      "properties": {
        "total_limbo_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The balance in satoshis encumbered in pending channels"
        },
        "pending_open_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponsePendingOpenChannel"
          },
          "title": "/ Channels pending opening"
        },
        "pending_closing_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseClosedChannel"
          },
          "title": "/ Channels pending closing"
        },
        "pending_force_closing_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseForceClosedChannel"
          },
          "title": "/ Channels pending force closing"
        },
        "waiting_close_channels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PendingChannelsResponseWaitingCloseChannel"
          },
          "title": "/ Channels waiting for closing tx to confirm"
        }
      }
    },
    "lnrpcPendingHTLC": {
      "type": "object",
      "properties": {
        "incoming": {
          "type": "boolean",
          "format": "boolean",
          "title": "/ The direction within the channel that the htlc was sent"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "/ The total value of the htlc"
        },
        "outpoint": {
          "type": "string",
          "title": "/ The final output to be swept back to the user's wallet"
        },
        "maturity_height": {
          "type": "integer",
          "format": "int64",
          "title": "/ The next block height at which we can spend the current stage"
        },
        "blocks_til_maturity": {
          "type": "integer",
          "format": "int32",
          "description": "*\r\nThe number of blocks remaining until the current stage can be swept.\r\nNegative values indicate how many blocks have passed since becoming\r\nmature."
        },
        "stage": {
          "type": "integer",
          "format": "int64",
          "title": "/ Indicates whether the htlc is in its first or second stage of recovery"
        }
      }
    },
    "lnrpcPendingUpdate": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "format": "byte"
        },
        "output_index": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcPolicyUpdateRequest": {
      "type": "object",
      "properties": {
        "global": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ If set, then this update applies to all currently active channels."
        },
        "chan_point": {
          "$ref": "#/definitions/lnrpcChannelPoint",
          "description": "/ If set, this update will target a specific channel."
        },
        "base_fee_msat": {
          "type": "string",
          "format": "int64",
          "description": "/ The base fee charged regardless of the number of milli-satoshis sent."
        },
        "fee_rate": {
          "type": "number",
          "format": "double",
          "description": "/ The effective fee rate in milli-satoshis. The precision of this value goes up to 6 decimal places, so 1e-6."
        },
        "time_lock_delta": {
          "type": "integer",
          "format": "int64",
          "description": "/ The required timelock delta for HTLCs forwarded over the channel."
        },
        "max_htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ If set, the maximum HTLC size in milli-satoshis. If unset, the maximum HTLC will be unchanged."
        },
        "min_htlc_msat": {
          "type": "string",
          "format": "uint64",
          "description": "/ The minimum HTLC size in milli-satoshis. Only applied if min_htlc_msat_specified is true."
        },
        "min_htlc_msat_specified": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ If true, min_htlc_msat is applied."
        }
      }
    },
    "lnrpcPolicyUpdateResponse": {
      "type": "object"
    },
    "lnrpcQueryRoutesResponse": {
      "type": "object",
      "properties": {
        "routes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcRoute"
          },
          "description": "*\r\nThe route that results from the path finding operation. This is still a\r\nrepeated field to retain backwards compatibility."
        },
        "success_prob": {
          "type": "number",
          "format": "double",
          "title": "*\r\nThe success probability of the returned route based on the current mission\r\ncontrol state. [EXPERIMENTAL]"
        }
      }
    },
    "lnrpcRestoreBackupResponse": {
      "type": "object"
    },
    "lnrpcRestoreChanBackupRequest": {
      "type": "object",
      "properties": {
        "chan_backups": {
          "$ref": "#/definitions/lnrpcChannelBackups",
          "description": "*\r\nThe channels to restore as a list of channel/backup pairs."
        },
        "multi_chan_backup": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe channels to restore in the packed multi backup format. When using\r\nREST, this field must be encoded as base64."
        }
      }
    },
    "lnrpcRoute": {
      "type": "object",
      "properties": {
        "total_time_lock": {
          "type": "integer",
          "format": "int64",
          "description": "*\r\nThe cumulative (final) time lock across the entire route. This is the CLTV\r\nvalue that should be extended to the first hop in the route. All other hops\r\nwill decrement the time-lock as advertised, leaving enough time for all\r\nhops to wait for or present the payment preimage to complete the payment."
        },
        "total_fees": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe sum of the fees paid at each hop within the final route. In the case\r\nof a one-hop payment, this value will be zero as we don't need to pay a fee\r\nto ourselves."
        },
        "total_amt": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe total amount of funds required to complete a payment over this route.\r\nThis value includes the cumulative fees at each hop. As a result, the HTLC\r\nextended to the first-hop in the route will need to have at least this many\r\nsatoshis, otherwise the route will fail at an intermediate node due to an\r\ninsufficient amount of fees."
        },
        "hops": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHop"
          },
          "description": "*\r\nContains details concerning the specific forwarding details at each hop."
        },
        "total_fees_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe total fees in millisatoshis."
        },
        "total_amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe total amount in millisatoshis."
        }
      },
      "description": "*\r\nA path through the channel graph which runs over one or more channels in\r\nsuccession. This struct carries all the information required to craft the\r\nSphinx onion packet, and send the payment along the first hop in the path. A\r\nroute is only selected as valid if all the channels have sufficient capacity to\r\ncarry the initial payment amount after fees are accounted for."
    },
    "lnrpcRouteHint": {
      "type": "object",
      "properties": {
        "hop_hints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcHopHint"
          },
          "description": "*\r\nA list of hop hints that when chained together can assist in reaching a\r\nspecific destination."
        }
      }
    },
    "lnrpcRoutingPolicy": {
      "type": "object",
      "properties": {
        "time_lock_delta": {
          "type": "integer",
          "format": "int64"
        },
        "min_htlc": {
          "type": "string",
          "format": "int64"
        },
        "fee_base_msat": {
          "type": "string",
          "format": "int64"
        },
        "fee_rate_milli_msat": {
          "type": "string",
          "format": "int64"
        },
        "disabled": {
          "type": "boolean",
          "format": "boolean"
        },
        "max_htlc_msat": {
          "type": "string",
          "format": "uint64"
        },
        "last_update": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "lnrpcSendCoinsRequest": {
      "type": "object",
      "properties": {
        "addr": {
          "type": "string",
          "title": "/ The address to send coins to"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "/ The amount in satoshis to send"
        },
        "target_conf": {
          "type": "integer",
          "format": "int32",
          "description": "/ The target number of blocks that this transaction should be confirmed by."
        },
        "sat_per_byte": {
          "type": "string",
          "format": "int64",
          "description": "/ A manual fee rate set in sat/byte that should be used when crafting the transaction."
        },
        "send_all": {
          "type": "boolean",
          "format": "boolean",
          "description": "*\r\nIf set, then the amount field will be ignored, and lnd will attempt to\r\nsend all the coins under control of the internal wallet to the specified\r\naddress."
        }
      }
    },
    "lnrpcSendCoinsResponse": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "title": "/ The transaction ID of the transaction"
        }
      }
    },
    "lnrpcSendManyResponse": {
      "type": "object",
      "properties": {
        "txid": {
          "type": "string",
          "title": "/ The id of the transaction"
        }
      }
    },
    "lnrpcSendRequest": {
      "type": "object",
      "properties": {
        "dest": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe identity pubkey of the payment recipient. When using REST, this field\r\nmust be encoded as base64."
        },
        "dest_string": {
          "type": "string",
          "description": "*\r\nThe hex-encoded identity pubkey of the payment recipient. Deprecated now\r\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "amt": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe amount to send expressed in satoshis.\r\n\nThe fields amt and amt_msat are mutually exclusive."
        },
        "amt_msat": {
          "type": "string",
          "format": "int64",
          "description": "*\r\nThe amount to send expressed in millisatoshis.\r\n\nThe fields amt and amt_msat are mutually exclusive."
        },
        "payment_hash": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe hash to use within the payment's HTLC. When using REST, this field\r\nmust be encoded as base64."
        },
        "payment_hash_string": {
          "type": "string",
          "description": "*\r\nThe hex-encoded hash to use within the payment's HTLC. Deprecated now\r\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "payment_request": {
          "type": "string",
          "description": "*\r\nA bare-bones invoice for a payment within the Lightning Network. With the\r\ndetails of the invoice, the sender has all the data necessary to send a\r\npayment to the recipient."
        },
        "final_cltv_delta": {
          "type": "integer",
          "format": "int32",
          "description": "*\r\nThe CLTV delta from the current height that should be used to set the\r\ntimelock for the final hop."
        },
        "fee_limit": {
          "$ref": "#/definitions/lnrpcFeeLimit",
          "description": "*\r\nThe maximum number of satoshis that will be paid as a fee of the payment.\r\nThis value can be represented either as a percentage of the amount being\r\nsent, or as a fixed amount of the maximum fee the user is willing the pay to\r\nsend the payment."
        },
        "outgoing_chan_id": {
          "type": "string",
          "format": "uint64",
          "description": "*\r\nThe channel id of the channel that must be taken to the first hop. If zero,\r\nany channel may be used."
        },
        "last_hop_pubkey": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe pubkey of the last hop of the route. If empty, any hop may be used."
        },
        "cltv_limit": {
          "type": "integer",
          "format": "int64",
          "description": "* \r\nAn optional maximum total time lock for the route. This should not exceed\r\nlnd's `--max-cltv-expiry` setting. If zero, then the value of\r\n`--max-cltv-expiry` is enforced."
        },
        "dest_custom_records": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "byte"
          },
          "description": "* \r\nAn optional field that can be used to pass an arbitrary set of TLV records\r\nto a peer which understands the new records. This can be used to pass\r\napplication specific data during the payment attempt. Record types are\r\nrequired to be in the custom range \u003e= 65536. When using REST, the values\r\nmust be encoded as base64."
        },
        "allow_self_payment": {
          "type": "boolean",
          "format": "boolean",
          "description": "/ If set, circular payments to self are permitted."
        },
        "dest_features": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcFeatureBit"
          },
          "description": "*\r\nFeatures assumed to be supported by the final node. All transitive feature\r\ndependencies must also be set properly. For a given feature bit pair, either\r\noptional or remote may be set, but not both. If this field is nil or empty,\r\nthe router will try to load destination features from the graph as a\r\nfallback."
        }
      }
    },
    "lnrpcSendResponse": {
      "type": "object",
      "properties": {
        "payment_error": {
          "type": "string"
        },
        "payment_preimage": {
          "type": "string",
          "format": "byte"
        },
        "payment_route": {
          "$ref": "#/definitions/lnrpcRoute"
        },
        "payment_hash": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "lnrpcSendToRouteRequest": {
      "type": "object",
      "properties": {
        "payment_hash": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe payment hash to use for the HTLC. When using REST, this field must be\r\nencoded as base64."
        },
        "payment_hash_string": {
          "type": "string",
          "description": "*\r\nAn optional hex-encoded payment hash to be used for the HTLC. Deprecated now\r\nthat the REST gateway supports base64 encoding of bytes fields."
        },
        "route": {
          "$ref": "#/definitions/lnrpcRoute",
          "description": "/ Route that should be used to attempt to complete the payment."
        }
      }
    },
    "lnrpcSignMessageRequest": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe message to be signed. When using REST, this field must be encoded as\r\nbase64."
        }
      }
    },
    "lnrpcSignMessageResponse": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "title": "/ The signature for the given message"
        }
      }
    },
    "lnrpcStopResponse": {
      "type": "object"
    },
    "lnrpcTransaction": {
      "type": "object",
      "properties": {
        "tx_hash": {
          "type": "string",
          "title": "/ The transaction hash"
        },
        "amount": {
          "type": "string",
          "format": "int64",
          "title": "/ The transaction amount, denominated in satoshis"
        },
        "num_confirmations": {
          "type": "integer",
          "format": "int32",
          "title": "/ The number of confirmations"
        },
        "block_hash": {
          "type": "string",
          "title": "/ The hash of the block this transaction was included in"
        },
        "block_height": {
          "type": "integer",
          "format": "int32",
          "title": "/ The height of the block this transaction was included in"
        },
        "time_stamp": {
          "type": "string",
          "format": "int64",
          "title": "/ Timestamp of this transaction"
        },
        "total_fees": {
          "type": "string",
          "format": "int64",
          "title": "/ Fees paid for this transaction"
        },
        "dest_addresses": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "/ Addresses that received funds for this transaction"
        },
        "raw_tx_hex": {
          "type": "string",
          "description": "/ The raw transaction hex."
        }
      }
    },
    "lnrpcTransactionDetails": {
      "type": "object",
      "properties": {
        "transactions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/lnrpcTransaction"
          },
          "description": "/ The list of transactions relevant to the wallet."
        }
      }
    },
    "lnrpcUnlockWalletRequest": {
      "type": "object",
      "properties": {
        "wallet_password": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nwallet_password should be the current valid passphrase for the daemon. This\r\nwill be required to decrypt on-disk material that the daemon requires to\r\nfunction properly. When using REST, this field must be encoded as base64."
        },
        "recovery_window": {
          "type": "integer",
          "format": "int32",
          "description": "*\r\nrecovery_window is an optional argument specifying the address lookahead\r\nwhen restoring a wallet seed. The recovery window applies to each\r\nindividual branch of the BIP44 derivation paths. Supplying a recovery\r\nwindow of zero indicates that no addresses should be recovered, such after\r\nthe first initialization of the wallet."
        },
        "channel_backups": {
          "$ref": "#/definitions/lnrpcChanBackupSnapshot",
          "description": "*\r\nchannel_backups is an optional argument that allows clients to recover the\r\nsettled funds within a set of channels. This should be populated if the\r\nuser was unable to close out all channels and sweep funds before partial or\r\ntotal data loss occurred. If specified, then after on-chain recovery of\r\nfunds, lnd begin to carry out the data loss recovery protocol in order to\r\nrecover the funds in each channel from a remote force closed transaction."
        }
      }
    },
    "lnrpcUnlockWalletResponse": {
      "type": "object"
    },
    "lnrpcUtxo": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/lnrpcAddressType",
          "title": "/ The type of address"
        },
        "address": {
          "type": "string",
          "title": "/ The address"
        },
        "amount_sat": {
          "type": "string",
          "format": "int64",
          "title": "/ The value of the unspent coin in satoshis"
        },
        "pk_script": {
          "type": "string",
          "title": "/ The pkscript in hex"
        },
        "outpoint": {
          "$ref": "#/definitions/lnrpcOutPoint",
          "title": "/ The outpoint in format txid:n"
        },
        "confirmations": {
          "type": "string",
          "format": "int64",
          "title": "/ The number of confirmations for the Utxo"
        }
      }
    },
    "lnrpcVerifyChanBackupResponse": {
      "type": "object"
    },
    "lnrpcVerifyMessageRequest": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string",
          "format": "byte",
          "description": "*\r\nThe message over which the signature is to be verified. When using REST,\r\nthis field must be encoded as base64."
        },
        "signature": {
          "type": "string",
          "title": "/ The signature to be verified over the given message"
        }
      }
    },
    "lnrpcVerifyMessageResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean",
          "format": "boolean",
          "title": "/ Whether the signature was valid over the given message"
        },
        "pubkey": {
          "type": "string",
          "title": "/ The pubkey recovered from the signature"
        }
      }
    },
    "lnrpcWalletBalanceResponse": {
      "type": "object",
      "properties": {
        "total_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The balance of the wallet"
        },
        "confirmed_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The confirmed balance of a wallet(with \u003e= 1 confirmations)"
        },
        "unconfirmed_balance": {
          "type": "string",
          "format": "int64",
          "title": "/ The unconfirmed balance of a wallet(with 0 confirmations)"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
